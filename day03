#include<stdio.h>
/*int main() {
	int a = 10;
	//int b = a++;//后置++，先使用，再++ 11,10
	//int b = ++a;//前置++，先++，后使用 11 11
	//int b = a--;//后置--，先使用，再-- 9 10
	int b = --a;//前置--，先--，再使用 9 9
	printf("a=%d b=%d\n", a, b);
	return 0;
}*/

//一些关键字的例子
//int main() {
//	//register int a = 10;建议把a定义为寄存器变量
//	int n = 10;
//	n = -2;
//	//int定义的变量是有符号的
//	//signed int全称  unsigned int无符号的
//	//struct-结构关键字
//	//union-联合体/共用体
//	//typedef-类型定义既类型重定义
//	typedef unsigned int uint;
//	unsigned int num = 1;
//	uint num2 = 2;
//	return 0;
//}
//void test() {
//	static int a = 1;//static修饰局部变量，改变生命周期，使其变长
//	a++;
//	printf("a=%d\n", a);//2,3,4,5,6
//}
//int main() {
//	int i = 0;
//	while (i < 5) {
//		test();
//		i++;
//	}
//	return 0;
//}
//static修饰全局变量时，使作用域变小，只能在当前源文件中使用，而不是整个工程
//static修饰函数改变了函数的连接属性
//由外部链接变为内部连接
//extern int Add(int, int);
//int main() {
//	extern int g;
//	//printf("g=\n", g);
//}
static int g = 2020;
static int Add(int x, int y) {
	int z = x + y;
	return z;
}
//#define定义的常量和宏
//#define定义的常量标识符
//#define MAX 10
////#define定义的宏-带参数
//int Max(int x, int y) {
//	if (x > y)
//		return x;
//	else
//		return y;
//}
////宏的实现
//#define MAX(X,Y) (X>Y?X:Y)
//int main() {
//	int a = 10;
//	int b = 20;
//	//函数
//	int max = Max(a, b);
//	printf("max=%d\n", max);
//	//宏
//	max = MAX(a,b);
//	printf("max=%d\n", max);
//	return 0;
//}

//简单的指针例子
int main() {
	int a = 10;
	 int* p=&a;//取地址a
	printf("%p\n", &a);//%p用来打印地址
	printf("%p\n", p);
	*p = 20;//*--一种解引用操作符。赋值给a这个变量
	printf("%d\n", a);
	//有一种变量是用来存放地址的-指针变量
	char ch = 'w';
	char* q = &ch;
	q = 'a';
	printf("%c\n", ch);
	printf("%d\n", sizeof(p));
	return 0;
}
