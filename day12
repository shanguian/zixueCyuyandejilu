#include<stdio.h>
//int main() {
//	short s = 0;
//	int a = 10;
//	printf("%d\n", sizeof(s = a + 5));//此时int放在short里，字节是short的大小
//	//sizeof里面的运算并不是真的运算，结果还是为0
//	printf("%d\n", s);
//	//int a = 10;
//	//char c = 'r';
//	//char* p = &c;
//	//int arr[10] = { 0 };
//	//printf("%d\n", sizeof a);//4
//	//printf("%d\n", sizeof(int));
//
//	//printf("%d\n", sizeof(c));//1
//	//printf("%d\n", sizeof(char));
//
//	//printf("%d\n", sizeof(p));//4
//	//printf("%d\n", sizeof(char*));
//
//	//printf("%d\n", sizeof(arr));//10*4
//	//printf("%d\n", sizeof(int[10]));
//	return 0;
//}

//int main() {
//	int a = 11;
//	a = a | (1 << 2);
//	printf("%d\n", a);//15
//	a = a & (~(1 << 2));
//	printf("%d\n", a);//11
//	//00000000000000000000000000001011
//	//00000000000000000000000000000100
//	//1<<2
//	//00000000000000000000000000000001
//	//
//	//00000000000000000000000000001111
//	//11111111111111111111111111111011
//	//00000000000000000000000000000100
//	//00000000000000000000000000001011
//	//int a = 0;
//	// ~按(2进制位)位取反
//	//32个0
//	//32个1-补码
//	//31个1 0-反码
//	//1 29个0 1-原码
//	////-1
//	//printf("%d\n", ~a);
//	return 0;
//}

//int main() {
//	int a = 10;
//	//printf("%d\n", ++a);//前置++，先++，再使用
//	printf("%d\n", a++);//后置++,先使用，再++
//	return 0;
//}

//int main() {
//	int a = (int)3.14;//强制转换
//	printf("%d\n", a);
//	return 0;
//}

//int main(){
//	int a = 0;
//	int b = 5;
//	//int c = a && b;
//	int c = a || b;
//	printf("%d\n", c);
//	return 0;
//}

//int main() {
//	int i = 0, a = 0, b = 2, c = 3, d = 4;
//	//i = a++ && ++b && d++;
//	i = a++ || ++b || d++;
//	printf("a=%d\nb=%d\nc=%d\nd=%d\n", a, b, c, d);
//	return 0;
//}

//int main() {
//	/*int a = 0;
//	int b = 0;
//	b = (a > 5 ? 3 : -3);*/
//	int a = 10;
//	int b = 20;
//	int max = a > b ? a : b;//条件操作符
//	return 0;
//}

//int main() {
//	int a[10] = { 0 };
//	a[4] = 10;//下标引用操作符
//	return 0;
//}

//int get_max(int x, int y) {
//	return x > y ? x : y;
//}
//int main() {
//	int a = 10;
//	int b = 20;
//	//调用函数的时候()就是函数调用操作符
//	int max = get_max(a, b);
//	printf("max=%d\n", max);
//	return 0;
//}

//学生
//struct Stu
//{
//	char name[20];
//	int age;
//	char id[20];
//};
//int main() {
//	int a = 10;
//	//使用struct Stu这个类型创建了一个学生对象s1，并初始化
//	struct Stu s1 = { "张三",20,"1685685" };
//	struct Stu *ps = &s1;
//	printf("%s\n", ps->name);
//	/*printf("%s\n", s1.name);
//	printf("%d\n", s1.age);
//	printf("%d\n", s1.id);*/
//	//结构体变量，成员名
//	return 0;
//}

//int main() {
//	char a = 3;
//	//00000000000000000000000000000011
//	//取八位 00000011-a
//	char b = 127;
//	//00000000000000000000000001111111
//	//01111111-b
//	//a+b
//	//00000000000000000000000000000011
//	//00000000000000000000000001111111
//	//00000000000000000000000010000010
//	char c = a + b;
//	//10000010-c
//	//00000000000000000000000010000010-补码
//	//11111111111111111111111101111101-反码
//	//10000000000000000000000011111110-原码
//	//-126
//	printf("%d\n", c);
//	return 0;
//}

int main() {
	int a = 10;
	int b = 20;
	int c = b + a * 3;
	return 0;
}
